generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model body_parts {
  id        Int         @id(map: "body_parts_pk") @default(autoincrement())
  name      String
  exercises exercises[]
}

model exercises {
  id                Int                 @id(map: "exercises_pk") @default(autoincrement())
  exercise_name     String
  compound          Boolean             @default(true)
  body_part_id      Int?
  body_parts        body_parts?         @relation(fields: [body_part_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "exercise_body_part_body_part_id_fk")
  routine_exercises routine_exercises[]
  workout_exercises workout_exercises[]
}

model flyway_schema_history {
  installed_rank Int      @id(map: "flyway_schema_history_pk")
  version        String?  @db.VarChar(50)
  description    String   @db.VarChar(200)
  type           String   @db.VarChar(20)
  script         String   @db.VarChar(1000)
  checksum       Int?
  installed_by   String   @db.VarChar(100)
  installed_on   DateTime @default(now()) @db.Timestamp(6)
  execution_time Int
  success        Boolean

  @@index([success], map: "flyway_schema_history_s_idx")
}

model routine_exercises {
  id          Int        @id(map: "routine_exercises_pk") @default(autoincrement())
  routine_id  Int?
  exercise_id Int?
  exercises   exercises? @relation(fields: [exercise_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "routine_exercises_exercise_exercise_id_pk")
  routines    routines?  @relation(fields: [routine_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "routine_exercises_routine_routine_id_fk")
}

model routines {
  id                Int                 @id(map: "routines_pk") @default(autoincrement())
  name              String
  weeks             Int
  frequency         Int
  user_id           Int?
  routine_exercises routine_exercises[]
  users             users?              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "routine_user_user_id_fk")
  workouts          workouts[]
}

model users {
  id          Int        @id(map: "users_pk") @default(autoincrement())
  first_name  String
  second_name String
  password    String
  routines    routines[]
}

model workout_exercise_sets {
  id                  Int                @id(map: "workout_exercise_sets_pk") @default(autoincrement())
  workout_exercise_id Int?
  reps                Int
  difficulty          String
  workout_exercises   workout_exercises? @relation(fields: [workout_exercise_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "workout_exercise_sets_workout_exercises_workout_exercise_id")
}

model workout_exercises {
  id                    Int                     @id(map: "workout_exercises_pk") @default(autoincrement())
  workout_id            Int?
  exercise_id           Int?
  workout_exercise_sets workout_exercise_sets[]
  exercises             exercises?              @relation(fields: [exercise_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "workout_exercises_exercise_exercise_id_fk")
  workouts              workouts?               @relation(fields: [workout_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "workout_exercises_workout_workout_id_fk")
}

model workouts {
  id                Int                 @id(map: "workouts_pk") @default(autoincrement())
  name              String
  date              DateTime            @db.Date
  routine_id        Int?
  workout_exercises workout_exercises[]
  routines          routines?           @relation(fields: [routine_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "workout_routine_routine_id_fk")
}
